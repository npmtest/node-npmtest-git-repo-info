{"/home/travis/build/npmtest/node-npmtest-git-repo-info/test.js":"/* istanbul instrument in package npmtest_git_repo_info */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-repo-info/lib.npmtest_git_repo_info.js":"/* istanbul instrument in package npmtest_git_repo_info */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_git_repo_info = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_git_repo_info = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-git-repo-info/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-git-repo-info && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_git_repo_info */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_git_repo_info\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_git_repo_info.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_git_repo_info.rollup.js'] =\n            local.assetsDict['/assets.npmtest_git_repo_info.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_git_repo_info.__dirname +\n                    '/lib.npmtest_git_repo_info.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-repo-info/node_modules/git-repo-info/index.js":"'use strict';\n\nvar fs   = require('fs');\nvar path = require('path');\nvar zlib = require('zlib');\n\nvar GIT_DIR = '.git';\n\nfunction changeGitDir(newDirName) {\n  GIT_DIR = newDirName;\n}\n\nfunction findRepoHandleLinkedWorktree(gitPath) {\n  var stat = fs.statSync(gitPath);\n  if (stat.isDirectory()) {\n    return {\n      // for the base (non-linked) dir, there is no distinction between where we\n      // find the HEAD file and where we find the rest of .git\n      worktreeGitDir: gitPath,\n      commonGitDir: gitPath,\n    };\n  } else {\n    // We have a file that tells us where to find the worktree git dir.  Once we\n    // look there we'll know how to find the common git dir, depending on\n    // whether it's a linked worktree git dir, or a submodule dir\n\n    var linkedGitDir = fs.readFileSync(gitPath).toString();\n    var absolutePath=path.resolve(path.dirname(gitPath));\n    var worktreeGitDirUnresolved = /gitdir: (.*)/.exec(linkedGitDir)[1];\n    var worktreeGitDir = path.resolve(absolutePath,worktreeGitDirUnresolved);\n    var commonDirPath = path.join(worktreeGitDir, 'commondir');\n    if (fs.existsSync(commonDirPath)) {\n      // this directory contains a `commondir` file; we're within a linked\n      // worktree\n\n      var commonDirRelative = fs.readFileSync(commonDirPath).toString().replace(/\\r?\\n$/, '');\n      var commonDir = path.resolve(path.join(worktreeGitDir, commonDirRelative));\n\n      return {\n        worktreeGitDir: worktreeGitDir,\n        commonGitDir: commonDir,\n      };\n    } else {\n      // there is no `commondir` file; we're in a submodule\n      return {\n        worktreeGitDir: worktreeGitDir,\n        commonGitDir: worktreeGitDir,\n      };\n    }\n  }\n}\n\nfunction findRepo(startingPath) {\n  var gitPath, lastPath;\n  var currentPath = startingPath;\n\n  if (!currentPath) { currentPath = process.cwd(); }\n\n  do {\n    gitPath = path.join(currentPath, GIT_DIR);\n\n    if (fs.existsSync(gitPath)) {\n      return findRepoHandleLinkedWorktree(gitPath);\n    }\n\n    lastPath = currentPath;\n    currentPath = path.resolve(currentPath, '..');\n  } while (lastPath !== currentPath);\n\n  return null;\n}\n\nfunction findPackedTags(gitPath, refPath) {\n  return getPackedRefsForType(gitPath, refPath, 'tag');\n}\n\nfunction findPackedCommit(gitPath, refPath) {\n  return getPackedRefsForType(gitPath, refPath, 'commit')[0];\n}\n\nfunction getPackedRefsForType(gitPath, refPath, type) {\n  var packedRefsFile = getPackedRefsFile(gitPath);\n  if (packedRefsFile) {\n    return getLinesForRefPath(packedRefsFile, type, refPath).map(function(shaLine) {\n      return getShaBasedOnType(type, shaLine);\n    });\n  }\n  return [];\n}\n\nfunction getPackedRefsFile(gitPath) {\n  var packedRefsFilePath = path.join(gitPath, 'packed-refs');\n  return fs.existsSync(packedRefsFilePath) ? fs.readFileSync(packedRefsFilePath, { encoding: 'utf8' }) : false;\n}\n\nfunction getLinesForRefPath(packedRefsFile, type, refPath) {\n  return packedRefsFile.split('\\n').reduce(function(acc, line, idx, arr) {\n    var targetLine = line.indexOf('^') > -1 ? arr[idx-1] : line;\n    return doesLineMatchRefPath(type, line, refPath) ? acc.concat(targetLine) : acc;\n  }, []);\n}\n\nfunction doesLineMatchRefPath(type, line, refPath) {\n  var refPrefix = type === 'tag' ? 'refs/tags' : 'refs/heads';\n  return (line.indexOf(refPrefix) > -1 || line.indexOf('^') > -1) && line.indexOf(refPath) > -1;\n}\n\nfunction getShaBasedOnType(type, shaLine) {\n  var shaResult = '';\n  if (type === 'tag') {\n    shaResult = shaLine.split('tags/')[1];\n  } else if (type === 'commit') {\n    shaResult = shaLine.split(' ')[0];\n  }\n\n  return shaResult;\n}\n\nfunction commitForTag(gitPath, tag) {\n  var tagPath = path.join(gitPath, 'refs', 'tags', tag);\n  var taggedObject = fs.readFileSync(tagPath, { encoding: 'utf8' }).trim();\n  var objectPath = path.join(gitPath, 'objects', taggedObject.slice(0, 2), taggedObject.slice(2));\n\n  if (!zlib.inflateSync || !fs.existsSync(objectPath)) {\n    // we cannot support annotated tags on node v0.10 because\n    // zlib does not allow sync access\n    return taggedObject;\n  }\n\n  var objectContents = zlib.inflateSync(fs.readFileSync(objectPath)).toString();\n\n  // 'tag 172\\u0000object c1ee41c325d54f410b133e0018c7a6b1316f6cda\\ntype commit\\ntag awesome-tag\\ntagger Robert Jackson\n  // <robert.w.jackson@me.com> 1429100021 -0400\\n\\nI am making an annotated tag.\\n'\n  if (objectContents.slice(0,3) === 'tag') {\n    var sections = objectContents.split(/\\0|\\n/);\n    var sha = sections[1].slice(7);\n\n    return sha;\n  } else {\n    // this will return the tag for lightweight tags\n    return taggedObject;\n  }\n}\n\nfunction findTag(gitPath, sha) {\n  var tags = findPackedTags(gitPath, sha)\n    .concat(findUnpackedTags(gitPath, sha));\n  tags.sort();\n  return tags.length ? tags[0] : false;\n}\n\nfunction findUnpackedTags(gitPath, sha) {\n  var unpackedTags = [];\n  var tags = findLooseRefsForType(gitPath, 'tags');\n  for (var i = 0, l = tags.length; i < l; i++) {\n    var commitAtTag = commitForTag(gitPath, tags[i]);\n    if (commitAtTag === sha) {\n      unpackedTags.push(tags[i]);\n    }\n  }\n  return unpackedTags;\n}\n\nfunction findLooseRefsForType(gitPath, type) {\n  var refsPath = path.join(gitPath, 'refs', type);\n  return fs.existsSync(refsPath) ? fs.readdirSync(refsPath) : [];\n}\n\nmodule.exports = function(gitPath) {\n  var gitPathInfo = findRepo(gitPath);\n\n  var result = {\n    sha: null,\n    abbreviatedSha: null,\n    branch: null,\n    tag: null,\n    committer: null,\n    committerDate: null,\n    author: null,\n    authorDate: null,\n    commitMessage: null,\n    root: null\n  };\n\n  if (!gitPathInfo) { return result; }\n\n  try {\n    result.root = path.resolve(gitPathInfo.commonGitDir, '..');\n\n    var headFilePath   = path.join(gitPathInfo.worktreeGitDir, 'HEAD');\n\n    if (fs.existsSync(headFilePath)) {\n      var headFile = fs.readFileSync(headFilePath, {encoding: 'utf8'});\n      var branchName = headFile.split('/').slice(2).join('/').trim();\n      if (!branchName) {\n        branchName = headFile.split('/').slice(-1)[0].trim();\n      }\n      var refPath = headFile.split(' ')[1];\n\n      // Find branch and SHA\n      if (refPath) {\n        refPath = refPath.trim();\n        var branchPath = path.join(gitPathInfo.commonGitDir, refPath);\n\n        result.branch  = branchName;\n        if (fs.existsSync(branchPath)) {\n          result.sha = fs.readFileSync(branchPath, { encoding: 'utf8' }).trim();\n        } else {\n          result.sha = findPackedCommit(gitPathInfo.commonGitDir, refPath);\n        }\n      } else {\n        result.sha = branchName;\n      }\n\n      result.abbreviatedSha = result.sha.slice(0,10);\n\n      // Find commit data\n      var commitData = getCommitData(gitPathInfo.commonGitDir, result.sha);\n      if (commitData) {\n        result = Object.keys(commitData).reduce(function(r, key) {\n          result[key] = commitData[key];\n          return result;\n        }, result);\n      }\n\n      // Find tag\n      var tag = findTag(gitPathInfo.commonGitDir, result.sha);\n      if (tag) {\n        result.tag = tag;\n      }\n    }\n  } catch (e) {\n    if (!module.exports._suppressErrors) {\n      throw e; // helps with testing and scenarios where we do not expect errors\n    } else {\n      // eat the error\n    }\n  }\n\n  return result;\n};\n\nmodule.exports._suppressErrors = true;\nmodule.exports._findRepo     = findRepo;\nmodule.exports._changeGitDir = changeGitDir;\n\nfunction getCommitData(gitPath, sha) {\n  var objectPath = path.join(gitPath, 'objects', sha.slice(0, 2), sha.slice(2));\n\n  if (zlib.inflateSync && fs.existsSync(objectPath)) {\n    var objectContents = zlib.inflateSync(fs.readFileSync(objectPath)).toString();\n\n    return objectContents.split(/\\0|\\n/)\n      .filter(function(item) {\n        return !!item;\n      })\n      .reduce(function(data, section) {\n        var part = section.slice(0, section.indexOf(' ')).trim();\n\n        switch(part) {\n          case 'commit':\n          case 'tag':\n          case 'object':\n          case 'type':\n          case 'tree':\n          case 'parent':\n            //ignore these for now\n            break;\n          case 'author':\n          case 'committer':\n            var parts = section.match(/^(?:author|committer)\\s(.+)\\s(\\d+\\s(?:\\+|\\-)\\d{4})$/);\n\n            if (parts) {\n              data[part] = parts[1];\n              data[part + 'Date'] = parseDate(parts[2]);\n            }\n            break;\n          default:\n            //should just be the commit message left\n            data.commitMessage = section;\n        }\n\n        return data;\n      }, {});\n  }\n}\n\nfunction parseDate(d) {\n  var epoch = d.split(' ')[0];\n  return new Date(epoch * 1000).toISOString();\n}\n"}